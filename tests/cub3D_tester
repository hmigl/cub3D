#!/bin/bash

program_name=cub3D

[[ -x ../"$program_name" ]] || make -C ../

function assert() {
  map_file="$1"
  expected="$2"
  name="$3"

  ../"$program_name" "$map_file" >/dev/null 2>/dev/null
  status=$?
  if [[ "$status" -eq "$expected" ]]; then
    printf "[ OK ]"
  else
    printf "[ KO ]"
  fi

  printf "\t(%s $name)"; echo ""
}

# Valid maps
assert "./assets/maps/valid/simple_map.cub" 0 "simple_map_should_return_ok"
assert "./assets/maps/valid/chaotic.cub" 0 "chaotic_map_with_spaces_everywhere_should_return_ok"
assert "./assets/maps/valid/maze0.cub" 0 "maze0_should_return_ok"
assert "./assets/maps/valid/maze1.cub" 0 "maze1_should_return_ok"
assert "./assets/maps/valid/square.cub" 0 "square_map_should_return_ok"
assert "./assets/maps/valid/donut.cub" 0 "donut_map_should_return_ok"

# Invalid maps
assert "./assets/maps/invalid/redundant_direction.cub" 1 "duplicated_direction_should_return_ko"
assert "./assets/maps/invalid/missing_direction.cub" 1 "missing_direction_should_return_ko"
assert "./assets/maps/invalid/invalid_chars.cub" 1 "map_with_invalid_chars_should_return_ko"
assert "./assets/maps/invalid/less_than_min_size.cub" 1 "too_small_map_should_return_ko"
